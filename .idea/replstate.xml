<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1486542247401">{:repl-history {:ide [], :local [&quot;(-&gt; (repeatedly #(rand-int 42)) (nth 2))&quot; &quot;(take 5 (repeatedly #(rand-int 42)))&quot; &quot;(take 15 (repeatedly #(rand-int 42)))&quot; &quot;(-&gt; (repeatedly #(rand-int 42)) (take 2))&quot; &quot;(-&gt; (repeatedly #(rand-int 42)) take 2)&quot; &quot;(-&gt;&gt; (repeatedly #(rand-int 42)) (take 2))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (line-seq rdr)]\n    (when (not= 0 (count line))\n      (println (-&gt;&gt;\n                 (filter #(not (clojure.string/blank? %))\n                         (clojure.string/split line #\&quot; \&quot;))\n                 (take 1))))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (line-seq rdr)]\n    (when (not= 0 (count line))\n      (println (-&gt;&gt;\n                 (filter #(not (clojure.string/blank? %))\n                         (clojure.string/split line #\&quot; \&quot;))\n                 (take 4))))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (line-seq rdr)]\n    (when (not= 0 (count line))\n      (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))]\n        (println day max-temp min-temp agg-values)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (line-seq rdr)]\n    (when (not= 0 (count line))\n      (println line))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (line-seq rdr)]\n    (when (not= 0 (count line))\n      (println (.split #\&quot;\\n\&quot; line 2)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (line-seq rdr)\n          line (next line)]\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            spread (- max-temp min-temp)]\n        (println day max-temp min-temp agg-values spread)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (next (line-seq rdr))\n          line (next line)\n          ]\n    (when (not= 0 (count line))\n      (println line))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (next (line-seq rdr))]\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            spread (- max-temp min-temp)]\n        (println day max-temp min-temp agg-values spread)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (next (line-seq rdr))]\n    (when (not= 0 (count line))\n      (println line))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (next (line-seq rdr))]\n    (when (not= 0 (count line))\n      (println (filter #(not (clojure.string/blank? %))\n                       (clojure.string/split line #\&quot; \&quot;))))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (next (line-seq rdr))]\n    (when (not= 0 (count line))\n      (println (-&gt;&gt; (filter #(not (clojure.string/blank? %))\n                            (clojure.string/split line #\&quot; \&quot;))\n                    (take 4))))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (next (line-seq rdr))]\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            ]\n        (println day max-temp min-temp agg-values)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (next (line-seq rdr))]\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            spread (- max-temp min-temp)]\n        (println day max-temp min-temp agg-values)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (next (line-seq rdr))]\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))]\n        (println day max-temp min-temp agg-values)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (next (line-seq rdr))]\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))]\n        (println day max-temp min-temp agg-values spread)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (next (line-seq rdr))]\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            max-temp (clojure.string/replace max-temp #\&quot;*\&quot; \&quot;\&quot;)\n            min-temp (clojure.string/replace min-temp #\&quot;*\&quot; \&quot;\&quot;)\n            ;spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n            ]\n        (println day max-temp min-temp agg-values)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (next (line-seq rdr))]\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            ;spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n            ]\n        (println day max-temp min-temp agg-values)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (drop-last (next (line-seq rdr)))] ;; jump first line (header)\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            ;spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n            ]\n        (println day max-temp min-temp agg-values)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (-&gt; (line-seq rdr)\n                   (next)\n                   (drop-last))] ;; jump first line (header)\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            ;spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n            ]\n        (println day max-temp min-temp agg-values)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (-&gt; (line-seq rdr)\n                   (next)         ;; drop first line (header)\n                   (drop-last))] ;; drop fast line (footer)\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n            ]\n        (println day max-temp min-temp agg-values spread)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (-&gt; (line-seq rdr)\n                   (next)         ;; drop first line (header)\n                   (drop-last))] ;; drop fast line (footer)\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n            max-spread (max spread)\n            ]\n        (println day max-temp min-temp agg-values spread max-spread)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (-&gt; (line-seq rdr)\n                   (next)         ;; drop first line (header)\n                   (drop-last))] ;; drop fast line (footer)\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n            ]\n        (pr day max-temp min-temp agg-values spread)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (-&gt; (line-seq rdr)\n                   (next)         ;; drop first line (header)\n                   (drop-last))] ;; drop fast line (footer)\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n            ]\n        (print day max-temp min-temp agg-values spread)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (-&gt; (line-seq rdr)\n                   (next)         ;; drop first line (header)\n                   (drop-last))] ;; drop fast line (footer)\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [spread-collection (atom [])\n            [day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n            _ (swap! spread-collection spread)]\n        (println day max-temp min-temp agg-values spread @spread-collection)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (-&gt; (line-seq rdr)\n                   (next)         ;; drop first line (header)\n                   (drop-last))] ;; drop fast line (footer)\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [spread-collection (atom [])\n            [day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n            _ (swap! spread-collection spread)]\n        (println day max-temp min-temp agg-values spread)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (-&gt; (line-seq rdr)\n                   (next)         ;; drop first line (header)\n                   (drop-last))] ;; drop fast line (footer)\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))]\n        (println day max-temp min-temp agg-values spread)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (-&gt; (line-seq rdr)\n                   (next)         ;; drop first line (header)\n                   (drop-last))] ;; drop fast line (footer)\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [spread-col (atom [])\n            [day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))]\n        (println day max-temp min-temp agg-values spread)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (-&gt; (line-seq rdr)\n                   (next)         ;; drop first line (header)\n                   (drop-last))] ;; drop fast line (footer)\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [spread-col (atom [])\n            [day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n            _ (swap! spread-col conj spread)]\n        (println day max-temp min-temp agg-values spread)))))&quot; &quot;(with-open [rdr (clojure.java.io/reader weather-file)]\n  (doseq [line (-&gt; (line-seq rdr)\n                   (next)         ;; drop first line (header)\n                   (drop-last))] ;; drop fast line (footer)\n    (when (not= 0 (count line)) ;; remove any empty rows\n      (let [spread-col (atom [])\n            [day max-temp min-temp agg-values] (-&gt;&gt;\n                                                 (filter #(not (clojure.string/blank? %))\n                                                         (clojure.string/split line #\&quot; \&quot;))\n                                                 (take 4))\n            max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n            spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n            _ (swap! spread-col conj spread)]\n        (println day max-temp min-temp agg-values spread @spread-col)))))&quot; &quot;(let [spread-col (atom [])]\n  (with-open [rdr (clojure.java.io/reader weather-file)]\n    (doseq [line (-&gt; (line-seq rdr)\n                     (next)         ;; drop first line (header)\n                     (drop-last))] ;; drop fast line (footer)\n      (when (not= 0 (count line)) ;; remove any empty rows\n        (let [\n              [day max-temp min-temp agg-values] (-&gt;&gt;\n                                                   (filter #(not (clojure.string/blank? %))\n                                                           (clojure.string/split line #\&quot; \&quot;))\n                                                   (take 4))\n              max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n              min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n              spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n              _ (swap! spread-col conj spread)]\n          (println day max-temp min-temp agg-values spread @spread-col)))))\n  (println @spread-col))&quot; &quot;(let [spread-col (atom [])]\n  (with-open [rdr (clojure.java.io/reader weather-file)]\n    (doseq [line (-&gt; (line-seq rdr)\n                     (next)         ;; drop first line (header)\n                     (drop-last))] ;; drop fast line (footer)\n      (when (not= 0 (count line)) ;; remove any empty rows\n        (let [\n              [day max-temp min-temp agg-values] (-&gt;&gt;\n                                                   (filter #(not (clojure.string/blank? %))\n                                                           (clojure.string/split line #\&quot; \&quot;))\n                                                   (take 4))\n              max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n              min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n              spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n              _ (swap! spread-col conj spread)]\n          (println day max-temp min-temp agg-values spread @spread-col))))))&quot; &quot;(let [spread-col (atom [])]\n  (with-open [rdr (clojure.java.io/reader weather-file)]\n    (doseq [line (-&gt; (line-seq rdr)\n                     (next)         ;; drop first line (header)\n                     (drop-last))] ;; drop fast line (footer)\n      (when (not= 0 (count line)) ;; remove any empty rows\n        (let [\n              [day max-temp min-temp agg-values] (-&gt;&gt;\n                                                   (filter #(not (clojure.string/blank? %))\n                                                           (clojure.string/split line #\&quot; \&quot;))\n                                                   (take 4))\n              max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n              min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n              spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n              _ (swap! spread-col conj spread)]\n          (println day max-temp min-temp agg-values spread @spread-col)))))\n  (println (max @spread-col)))&quot; &quot;(max [4 5])&quot; &quot;(apply max [4 5])&quot; &quot;(map max [4 5])&quot; &quot;(let [spread-col (atom [])]\n  (with-open [rdr (clojure.java.io/reader weather-file)]\n    (doseq [line (-&gt; (line-seq rdr)\n                     (next)         ;; drop first line (header)\n                     (drop-last))] ;; drop fast line (footer)\n      (when (not= 0 (count line)) ;; remove any empty rows\n        (let [\n              [day max-temp min-temp agg-values] (-&gt;&gt;\n                                                   (filter #(not (clojure.string/blank? %))\n                                                           (clojure.string/split line #\&quot; \&quot;))\n                                                   (take 4))\n              max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n              min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n              spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n              _ (swap! spread-col conj spread)]\n          (println day max-temp min-temp agg-values spread @spread-col)))))\n  (println (apply max @spread-col)))&quot; &quot;(defn- get-spread\n  \&quot;Function gets spread for all the days\&quot;\n  [^File file]\n  (let [spread-col (atom [])]\n    (with-open [rdr (clojure.java.io/reader file)]\n      (doseq [line (-&gt; (line-seq rdr)\n                       (next)         ;; drop first line (header)\n                       (drop-last))] ;; drop fast line (footer)\n        (when (not= 0 (count line)) ;; remove any empty rows\n          (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                     (filter #(not (clojure.string/blank? %))\n                                                             (clojure.string/split line #\&quot; \&quot;))\n                                                     (take 4))\n                max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n                min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n                spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n                _ (swap! spread-col conj spread)]))))\n    (apply max @spread-col)))&quot; &quot;(defn- get-spread\n  \&quot;Function gets spread for all the days\&quot;\n  [^File file]\n  (let [spread-col (atom [])]\n    (with-open [rdr (clojure.java.io/reader file)]\n      (doseq [line (-&gt; (line-seq rdr)\n                       (next)         ;; drop first line (header)\n                       (drop-last))] ;; drop fast line (footer)\n        (when (not= 0 (count line)) ;; remove any empty rows\n          (let [[day max-temp min-temp agg-values] (-&gt;&gt;\n                                                     (filter #(not (clojure.string/blank? %))\n                                                             (clojure.string/split line #\&quot; \&quot;))\n                                                     (take 4))\n                max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n                min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n                spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n                _ (swap! spread-col conj spread)]))))\n    @spread-col))&quot; &quot;(defn- print-result\n  \&quot;Function prints day and max spread to std out\&quot;\n  [spread]\n  (let [max-spread (apply max spread)]\n    max-spread))&quot; &quot;(.indexOf 3 [2 4 5 3])&quot; &quot;(.indexOf [2 4 5 3] 3)&quot; &quot;(defn- print-result\n  \&quot;Function prints day and max spread to std out\&quot;\n  [spread]\n  (let [max-spread (apply max spread)\n        day-of-month (.indexOf spread max-spread)]\n    day-of-month))&quot; &quot;(defn- print-result\n  \&quot;Function prints day and max spread to std out\&quot;\n  [spread]\n  (let [max-spread (apply max spread)\n        day-of-month (-&gt; (.indexOf spread max-spread) \n                         (- 1))]\n    day-of-month))&quot; &quot;(defn- print-result\n  \&quot;Function prints day and max spread to std out\&quot;\n  [spread]\n  (let [max-spread (apply max spread)\n        day-of-month (-&gt; (.indexOf spread max-spread) \n                         (- 1))]\n    (println day-of-month max-spread)))&quot; &quot;(defn- print-result\n  \&quot;Function prints day and max spread to std out\&quot;\n  [spread]\n  (let [max-spread (apply max spread)\n        day-of-month (-&gt; (.indexOf spread max-spread) \n                         (- 1))]\n    (println day-of-month \&quot;\\n\&quot; max-spread)))&quot; &quot;(defn- print-result\n  \&quot;Function prints day and max spread to std out\&quot;\n  [spread]\n  (let [max-spread (apply max spread)\n        day-of-month (-&gt; (.indexOf spread max-spread) \n                         (- 1))]\n    (println day-of-month)\n    (println max-spread)\n    ))&quot; &quot;(defn- get-spread\n  \&quot;Function gets spread for all the days\&quot;\n  [^File file]\n  (let [spread-col (atom [])]\n    (with-open [rdr (clojure.java.io/reader file)]\n      (doseq [line (-&gt; (line-seq rdr)\n                       (next)         ;; drop first line (header)\n                       (drop-last))] ;; drop fast line (footer)\n        (when (not= 0 (count line)) ;; remove any empty rows\n          (let [[_ max-temp min-temp _] (-&gt;&gt;\n                                                     (filter #(not (clojure.string/blank? %))\n                                                             (clojure.string/split line #\&quot; \&quot;))\n                                                     (take 4))\n                max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n                min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;)\n                spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp))\n                _ (swap! spread-col conj spread)]))))\n    @spread-col))&quot; &quot;(defn- print-result\n  \&quot;Function prints day and max spread to std out\&quot;\n  [spread]\n  (let [max-spread (apply max spread)\n        day-of-month (-&gt; (.indexOf spread max-spread)\n                         (- 1))]\n    (println day-of-month)\n    (println max-spread)\n    ))&quot; &quot;(print-result (get-spread weather-file))&quot; &quot;(defn- get-spread\n  \&quot;Function gets spread for all the days\&quot;\n  [^File file]\n  (let [spread-col (atom [])] ;; spread collection --- a vector containing spread values for the month\n    (with-open [rdr (clojure.java.io/reader file)] ;; open and read file\n      (doseq [\n              line (-&gt; (line-seq rdr) ;; parse file line by lien\n                       (next)         ;; drop first line (header)\n                       (drop-last)) ;; drop last line (footer)\n              ]\n        (when (not= 0 (count line)) ;; remove any empty rows\n          (let [[_ max-temp min-temp _] (-&gt;&gt;\n                                           (filter #(not (clojure.string/blank? %)) ;; remove white spaces\n                                                             (clojure.string/split line #\&quot; \&quot;))\n                                                     (take 4)) ;; take the first 4 columns\n                max-temp (clojure.string/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;) ;; remove * from maximum temperature dataset\n                min-temp (clojure.string/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;) ;; remove * from minimum temperature dataset\n                spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp)) ;; calculate spread\n                _ (swap! spread-col conj spread) ;; insert spread to collection\n                ]))))\n    @spread-col ;; return the spread collection result, populated with values for entire month\n    ))&quot; &quot;(def weather-file (System/getenv \&quot;weather.file\&quot;))&quot; &quot;(defn- print-result\n  \&quot;Function prints day and max spread to std out\&quot;\n  [spread]\n  (let [max-spread (apply max spread) ;; get the maximum spread\n        day-of-month (-&gt; (.indexOf spread max-spread) ;; get the day of month\n                         (- 1));; subtract 1 because Java method indexOf starts counting from 0\n        ]\n    (println day-of-month) ;; print day of month\n    (println max-spread) ;; print max spread\n    ))&quot; &quot;(ns weathermaxspreadapp.core\n  (:require [clojure.string :as clstr]\n            [clojure.tools.logging :as log])\n  (:import (java.io File)))&quot; &quot;(defn- print-result\n  \&quot;Function prints day and max spread to std out\&quot;\n  [spread]\n  (let [max-spread (apply max spread) ;; get the maximum spread\n        day-of-month (-&gt; (.indexOf spread max-spread) ;; get the day of month\n                         (- 1));; subtract 1 because Java method indexOf starts counting from 0\n        ]\n    (log/info day-of-month) ;; print day of month\n    (log/info max-spread) ;; print max spread\n    ))&quot; &quot;(defn- print-result\n  \&quot;Function prints day and max spread to std out\&quot;\n  [spread]\n  (let [max-spread (apply max spread) ;; get the maximum spread\n        day-of-month (-&gt; (.indexOf spread max-spread) ;; get the day of month\n                         (- 1));; subtract 1 because Java method indexOf starts counting from 0\n        ]\n    (log/info day-of-month max-spread) ;; print day of month and max spread\n    ))&quot; &quot;(defn- print-result\n  \&quot;Function prints day and max spread to std out\&quot;\n  [spread]\n  (let [max-spread (apply max spread) ;; get the maximum spread\n        day-of-month (-&gt; (.indexOf spread max-spread) ;; get the day of month\n                         (- 1));; subtract 1 because Java method indexOf starts counting from 0\n        ]\n    (str day-of-month max-spread) ;; print day of month and max spread\n    ))&quot; &quot;(defn -main [&amp; args]\n  \&quot;start service\&quot;\n  (log/info \&quot;starting service\&quot;)\n  (print-result (get-spread weather-file)))&quot; &quot;(ns weathermaxspreadapp.core\n  (:require [clojure.string :as clstr])\n  (:import (java.io File)))&quot; &quot;(defn- print-result\n  \&quot;Function prints day and max spread to std out\&quot;\n  [spread]\n  (let [max-spread (apply max spread) ;; get the maximum spread\n        day-of-month (-&gt; (.indexOf spread max-spread) ;; get the day of month\n                         (- 1));; subtract 1 because Java method indexOf starts counting from 0\n        ]\n    (prn day-of-month max-spread) ;; print day of month and max spread\n    ))&quot; &quot;(defn -main [&amp; args]\n  \&quot;start service\&quot;\n  (print-result (get-spread weather-file)))&quot; &quot;weather-file&quot; &quot;(ns weathermaxspreadapp.core\n  (:gen-class)\n  (use clojure.java.io)\n  (:require [clojure.string :as clstr])\n  (:import (java.io File)))&quot; &quot;(.exists weather-file)&quot; &quot;(.exists (file weather-file))&quot; &quot;(def weather-file \&quot;E:\\\\abala\\\\weathermaxspreadapp\\\\src\\\\weathere.dat\&quot;)&quot; &quot;(defn -main \n  \&quot;Execution starts here -- start service\&quot;\n  [&amp; args]\n  (if (.exists (clojure.java.io/file weather-file)) ;; check if file exists\n    (print-result (get-spread weather-file)) ;; file exists, proceed\n    (do ;; file does not exist\n      (println \&quot;File \&quot; weather-file \&quot; does not exist\&quot;) ;; log error\n      (System/exit 1))))&quot; &quot;(ns weathermaxspreadapp.core\n  (:gen-class)\n  (:require [clojure.string :as clstr])\n  (:import (java.io File)))&quot; &quot;(defn- get-spread\n  \&quot;Function gets spread for all the days\&quot;\n  [^File file]\n  (let [spread-col (atom [])] ;; spread collection --- a vector containing spread values for the month\n    (with-open [rdr (clojure.java.io/reader file)] ;; open and read file\n      (doseq [\n              line (-&gt; (line-seq rdr) ;; parse file line by lien\n                       (next)         ;; drop first line (header)\n                       (drop-last)) ;; drop last line (footer)\n              ]\n        (when (not= 0 (count line)) ;; remove any empty rows\n          (let [[_ max-temp min-temp _] (-&gt;&gt;\n                                           (filter #(not (clstr/blank? %)) ;; remove white spaces\n                                                             (clstr/split line #\&quot; \&quot;))\n                                                     (take 4)) ;; take the first 4 columns\n                max-temp (clstr/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;) ;; remove * from maximum temperature dataset\n                min-temp (clstr/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;) ;; remove * from minimum temperature dataset\n                spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp)) ;; calculate spread\n                _ (swap! spread-col conj spread) ;; insert spread to collection\n                ]))))\n    @spread-col ;; return the spread collection result, populated with values for entire month\n    ))&quot; &quot;(def weather-file \&quot;E:\\\\abala\\\\weathermaxspreadapp\\\\src\\\\weather.dat\&quot;)&quot; &quot;(def weather-file \&quot;E:\\\\weather.dat\&quot;)&quot; &quot;(defn- get-spread\n  \&quot;Function gets spread for all the days\&quot;\n  [^File file]\n  (let [spread-col (atom [])] ;; spread collection --- a vector containing spread values for the month\n    (with-open [rdr (clojure.java.io/reader file)] ;; open and read file\n      (doseq [\n              line (-&gt; (line-seq rdr) ;; parse file line by lien\n                       (next)         ;; drop first line (header)\n                       (drop-last)) ;; drop last line (footer)\n              ]\n        (when (not= 0 (count line)) ;; remove any empty rows\n          (let [[_ max-temp min-temp _] (-&gt;&gt;\n                                          (filter #(not (clstr/blank? %)) ;; remove white spaces\n                                                  (clstr/split line #\&quot; \&quot;))\n                                          (take 4)) ;; take the first 4 columns\n                max-temp (clstr/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;) ;; remove * from maximum temperature dataset\n                min-temp (clstr/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;) ;; remove * from minimum temperature dataset\n                spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp)) ;; calculate spread\n                _ (swap! spread-col conj spread) ;; insert spread to collection\n                ]))))\n    @spread-col ;; return the spread collection result, populated with values for entire month\n    ))&quot; &quot;(defn- print-result\n  \&quot;Function prints day and max spread to stdout\&quot;\n  [spread]\n  (let [max-spread (apply max spread) ;; get the maximum spread\n        day-of-month (-&gt; (.indexOf spread max-spread) ;; get the day of month\n                         (- 1));; subtract 1 because Java method indexOf starts counting from 0\n        ]\n    (prn day-of-month max-spread) ;; print day of month and max spread\n    ))&quot; &quot;(ns weathermaxspreadapp.core-test\n  (:require [clojure.test :refer :all]\n            [weathermaxspreadapp.core :refer :all]))&quot; &quot;(defn add2 [x]\n  (+ x 2))&quot; &quot;(with-test\n  (defn add2 [x]\n    (+ x 2))\n  (is (= 4 (add2 2)))\n  (is (= 5 (add2 3))))&quot; &quot;(ns weathermaxspreadapp.core\n  ^{:author \&quot;@joeabala\&quot;\n    :doc \&quot;application reads weather file and calculates the maximum spread\&quot;\n    :added \&quot;1.0\&quot;\n    }\n  (:gen-class)\n  (:require [clojure.string :as clstr])\n  (:import (java.io File)))&quot; &quot;(def weather-file \&quot;/Users/abala/Downloads/weather.dat\&quot;)&quot; &quot;(defn get-spread\n  \&quot;Function gets spread for all the days\&quot;\n  [^File file]\n  (let [spread-col (atom [])] ;; spread collection --- a vector containing spread values for the month\n    (with-open [rdr (clojure.java.io/reader file)] ;; open and read file\n      (doseq [\n              line (-&gt; (line-seq rdr) ;; parse file line by lien\n                       (next)         ;; drop first line (header)\n                       (drop-last)) ;; drop last line (footer)\n              ]\n        (when (not= 0 (count line)) ;; remove any empty rows\n          (let [[_ max-temp min-temp _] (-&gt;&gt;\n                                          (filter #(not (clstr/blank? %)) ;; remove white spaces\n                                                  (clstr/split line #\&quot; \&quot;))\n                                          (take 4)) ;; take the first 4 columns\n                max-temp (clstr/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;) ;; remove * from maximum temperature dataset\n                min-temp (clstr/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;) ;; remove * from minimum temperature dataset\n                spread (- (Double/parseDouble max-temp) (Double/parseDouble min-temp)) ;; calculate spread\n                _ (swap! spread-col conj spread) ;; insert spread to collection\n                ]))))\n    @spread-col ;; return the spread collection result, populated with values for entire month\n    ))&quot; &quot;(defn print-result\n  \&quot;Function prints day and max spread to stdout\&quot;\n  [spread]\n  (let [max-spread (apply max spread) ;; get the maximum spread\n        day-of-month (-&gt; (.indexOf spread max-spread) ;; get the day of month\n                         (- 1));; subtract 1 because Java method indexOf starts counting from 0\n        ]\n    (prn day-of-month max-spread) ;; print day of month and max spread\n    ))&quot; &quot;(get-spread weather-file)&quot; &quot;(.indexOf [29.0\n           16.0\n           22.0\n           18.0\n           24.0\n           20.0\n           16.0\n           21.0\n           54.0\n           20.0\n           32.0\n           15.0\n           11.0\n           2.0\n           9.0\n           20.0\n           24.0\n           30.0\n           20.0\n           27.0\n           27.0\n           26.0\n           22.0\n           13.0\n           18.0\n           33.0\n           19.0\n           16.0\n           22.0\n           45.0] 54.0)&quot; &quot;(defn print-result\n  \&quot;Function prints day and max spread to stdout\&quot;\n  [spread]\n  (let [max-spread (apply max spread) ;; get the maximum spread\n        day-of-month (-&gt; (.indexOf spread max-spread) ;; get the day of month\n                         (+ 1));; add 1 because Java method indexOf starts counting from 0\n        ]\n    (prn day-of-month max-spread) ;; print day of month and max spread\n    ))&quot; &quot;(defn -main\n  \&quot;Execution starts here -- start service\&quot;\n  [&amp; args]\n  (if (.exists (clojure.java.io/file weather-file)) ;; check if file exists\n    (print-result (get-spread weather-file)) ;; file exists, proceed\n    (do ;; file does not exist\n      (println \&quot;File \&quot; weather-file \&quot; does not exist\&quot;) ;; log error\n      (System/exit 1))))&quot; &quot;(ns weathermaxspreadapp.core\n  ^{:author \&quot;@joeabala\&quot;\n    :doc \&quot;application reads weather file and calculates the maximum spread\&quot;\n    :added \&quot;1.0\&quot;\n    }\n  (:gen-class)\n  (:require [clojure.string :as clstr]))&quot; &quot;(def weather-file \&quot;/Users/abala/Downloads/weatherapp/weather.dat\&quot;)&quot; &quot;(defn print-result\n  \&quot;Function prints day and max spread to stdout\&quot;\n  [spread]\n  (let [max-spread (apply max spread) ;; get the maximum spread\n        day-of-month (-&gt; (.indexOf spread max-spread) ;; get the day of month\n                         (+ 1));; add 1 because Java method indexOf starts counting from 0\n        ]\n    [day-of-month max-spread]\n    ;(prn day-of-month max-spread) ;; print day of month and max spread\n    ))&quot; &quot;(defn print-result\n  \&quot;Function prints day and max spread to stdout\&quot;\n  [spread]\n  (let [max-spread (apply max spread) ;; get the maximum spread\n        day-of-month (-&gt; (.indexOf spread max-spread) ;; get the day of month\n                         (+ 1));; add 1 because Java method indexOf starts counting from 0\n        ]\n    (prn day-of-month max-spread) ;; print day of month and max spread\n    [day-of-month max-spread]\n    ))&quot; &quot;(def weather-file \&quot;/Users/abala/Downloads/weatherapp/weather_test1.dat\&quot;)&quot; &quot;(defn calculate-spread\n  \&quot;Function calculates spread for all the days\&quot;\n  [^String file]\n  (let [spread-col (atom [])] ;; spread collection --- a vector containing spread values for the month\n    (with-open [rdr (clojure.java.io/reader file)] ;; open and read file\n      (doseq [\n              line (-&gt; (line-seq rdr) ;; parse file line by lien\n                       (next)         ;; drop first line (header)\n                       (drop-last)) ;; drop last line (footer)\n              ]\n        (when (not= 0 (count line)) ;; remove any empty rows\n          (let [[_ max-temp min-temp _] (-&gt;&gt;\n                                          (filter #(not (clstr/blank? %)) ;; remove white spaces\n                                                  (clstr/split line #\&quot; \&quot;))\n                                          (take 4)) ;; take the first 4 columns\n                max-temp (clstr/replace max-temp #\&quot;\\*\&quot; \&quot;\&quot;) ;; remove * from maximum temperature dataset\n                min-temp (clstr/replace min-temp #\&quot;\\*\&quot; \&quot;\&quot;) ;; remove * from minimum temperature dataset\n                spread (- (Integer/parseInt max-temp) (Integer/parseInt min-temp)) ;; calculate spread\n                _ (swap! spread-col conj spread) ;; insert spread to collection\n                ]))))\n    @spread-col ;; return the spread collection result, populated with values for entire month\n    ))&quot; &quot;(def weather-file \&quot;/Users/abala/Downloads/weather_test2.dat\&quot;)&quot; &quot;(def weather-file \&quot;/Users/abala/Downloads/weather_test1.dat\&quot;)&quot; &quot;(calculate-spread weather-file)&quot; &quot;(defn -main\n  \&quot;Execution starts here -- start service\&quot;\n  [&amp; args]\n  (if (.exists (clojure.java.io/file weather-file)) ;; check if file exists\n    (print-result (calculate-spread weather-file)) ;; file exists, proceed\n    (do ;; file does not exist\n      (println \&quot;File \&quot; weather-file \&quot; does not exist\&quot;) ;; log error\n      (System/exit 1))))&quot; &quot;(-main)&quot; &quot;(run-all-tests)&quot;], :remote []}}</component>
</project>